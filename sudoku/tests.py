#!/usr/bin/env python3

import unittest
import logic

class Test(unittest.TestCase):
    def test_is_there_solution_true1(self):
        table = [[1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 0, 1]]
        variants = [[[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [1], []]]
        self.assertEqual(logic.is_there_solution(table, variants), True)

    def test_is_there_solution_true2(self):
        table = [[1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1]]
        variants = [[[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [1], []]]
        self.assertEqual(logic.is_there_solution(table, variants), True)

    def test_is_there_solution_false(self):
        table = [[1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 0, 1]]
        variants = [[[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []],
                    [[], [], [], [], [], [], [], [], []]]
        self.assertEqual(logic.is_there_solution(table, variants), False)

    def test_is_there_mistakes_true_line(self):
        table = [[1, 0, 0, 1, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        self.assertEqual(logic.is_there_mistakes(table, False), True)

    def test_is_there_mistakes_true_column(self):
        table = [[1, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [1, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        self.assertEqual(logic.is_there_mistakes(table, False), True)

    def test_is_there_mistakes_true_square(self):
        table = [[1, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 1, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        self.assertEqual(logic.is_there_mistakes(table, False), True)

    def test_is_there_mistakes_true_daigonal1(self):
        table = [[1, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 1, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        self.assertEqual(logic.is_there_mistakes(table, True), True)

    def test_is_there_mistakes_true_diagonal2(self):
        table = [[1, 0, 0, 0, 0, 0, 0, 0, 2],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 2, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        self.assertEqual(logic.is_there_mistakes(table, True), True)

    def test_is_there_mistakes_false(self):
        table = [[1, 2, 3, 4, 5, 6, 7, 8, 9],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [9, 8, 7, 6, 4, 5, 3, 2, 1]]
        self.assertEqual(logic.is_there_mistakes(table, False), False)

    def test_remove_bad_numbers(self):
        table = [[1, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0]]

        variants = [[[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]],
                    [[1], [1], [1], [1], [1], [1], [1], [1], [1]]]

        result = [[[], [], [], [], [], [], [], [], []],
                  [[], [], [], [1], [1], [1], [1], [1], [1]],
                  [[], [], [], [1], [1], [1], [1], [1], [1]],
                  [[], [1], [1], [], [1], [1], [1], [1], [1]],
                  [[], [1], [1], [1], [], [1], [1], [1], [1]],
                  [[], [1], [1], [1], [1], [], [1], [1], [1]],
                  [[], [1], [1], [1], [1], [1], [], [1], [1]],
                  [[], [1], [1], [1], [1], [1], [1], [], [1]],
                  [[], [1], [1], [1], [1], [1], [1], [1], []]]
        logic.remove_bad_numbers(table, variants, True)
        self.assertEqual(variants, result)

    def test_find_cell_to_fill1(self):
        table = [[1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1]]
        i, j = logic.find_cell_to_fill(table)
        self.assertEqual(i, -1)

    def test_find_cell_to_fill(self):
        table = [[1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 0, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1],
                 [1, 1, 1, 1, 1, 1, 1, 1, 1]]
        i, j = logic.find_cell_to_fill(table)
        self.assertEqual(i, 1)
        self.assertEqual(j, 6)

    def test_one_solution(self):
        num = 0
        table = [[3, 0, 0, 0, 0, 0, 0, 0, 0],
                 [2, 0, 4, 5, 7, 3, 0, 1, 0],
                 [7, 5, 9, 0, 4, 8, 6, 3, 2],
                 [0, 0, 0, 2, 0, 7, 5, 9, 0],
                 [6, 4, 2, 9, 5, 1, 3, 0, 8],
                 [5, 9, 0, 0, 8, 4, 1, 2, 0],
                 [1, 0, 0, 4, 0, 0, 9, 0, 0],
                 [0, 0, 6, 7, 3, 0, 2, 4, 0],
                 [0, 2, 5, 8, 1, 9, 0, 6, 3]]
        variants = [[[], [1, 6, 8], [1, 8], [1, 6], [2, 6, 9], [2, 6], [4, 7, 8],\
                     [5, 7, 8], [4, 5, 7, 9]], [[], [6, 8], [], [], [], [], [8],\
                    [], [9]], [[], [], [], [1], [], [], [], [], []],\
                    [[8], [1, 3, 8], [1, 3, 8], [], [6], [], [], [], [4, 6]],\
                    [[], [], [], [], [], [], [], [7], []],\
                    [[], [], [3, 7], [3, 6], [], [], [], [], [6, 7]],\
                    [[], [3, 7, 8], [3, 7, 8], [], [2, 6], [2, 5, 6], [], [5, 7, 8],\
                     [5, 7]], [[8, 9], [8], [], [], [], [5], [], [], [1, 5]],\
                    [[4], [], [], [], [], [], [7], [], []]]
        with open("test.txt", "w") as f:
            num = logic.solve_sudoku(table, variants, True, False, f, num)
        self.assertEqual(num, 1)

    def test_some_solutions(self):
        num = 0
        table = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [2, 0, 4, 5, 7, 3, 0, 1, 0],
                 [7, 5, 9, 0, 4, 8, 6, 3, 2],
                 [0, 0, 0, 2, 0, 7, 5, 9, 0],
                 [6, 4, 2, 9, 5, 1, 3, 0, 8],
                 [5, 9, 0, 0, 8, 4, 1, 2, 0],
                 [1, 0, 0, 4, 0, 0, 9, 0, 0],
                 [0, 0, 6, 7, 3, 0, 2, 4, 0],
                 [0, 2, 5, 8, 1, 9, 0, 6, 3]]
        variants = [[[3, 8], [1, 3, 6, 8], [1, 3, 8], [1, 6], [2, 6, 9], [2, 6],\
                     [4, 7, 8], [5, 7, 8], [4, 5, 7, 9]], [[], [6, 8], [], [], [],\
                    [], [8], [], [9]], [[], [], [], [1], [], [], [], [], []],\
                    [[3, 8], [1, 3, 8], [1, 3, 8], [], [6], [], [], [], [4, 6]], \
                    [[], [], [], [], [], [], [], [7], []],\
                    [[], [], [3, 7], [3, 6], [], [], [], [], [6, 7]],\
                    [[], [3, 7, 8], [3, 7, 8], [], [2, 6], [2, 5, 6], [], [5, 7, 8],\
                     [5, 7]], [[8, 9], [8], [], [], [], [5], [], [], [1, 5]],\
                    [[4], [], [], [], [], [], [7], [], []]]
        with open("test.txt", "w") as f:
            num = logic.solve_sudoku(table, variants, True, False, f, num)
        self.assertTrue(num > 1)

if __name__ == '__main__':
    unittest.main()